#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

//--------------------------------------------------

/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------

	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////

	//-------------------------------------------------------

	////////////////////////////
	// Set up map environment
	void Setup()
	{

	}

	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{

	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed)
	{
		if(abPressed==false) return;

		if(alAction == eAction_Test1)
		{
		}
	}

	bool hasBeenOpened = false;
	void OnDoorButtonStateChanged(const tString &in asEntity, int alState)
	{
		cLux_AddDebugMessage("state changed: " + alState);
		if (alState == 1 && !hasBeenOpened)
		{
			hasBeenOpened = true;
			cLux_AddDebugMessage("turing on!");
			Lamp_SetLit("lamp_long_hallway_1", true, true);
			Lamp_SetLit("lamp_long_hallway_2", true, true);
			Lamp_SetLit("lamp_long_hallway_3", true, true);
			Lamp_SetLit("lamp_long_hallway_4", true, true);
		}
	}

	bool OnPlayerEntersTrigger(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == -1)
		{
			return true;
		}

		bool l1 = Lamp_GetLit("lamp_long_hallway_1");
		bool l2 = Lamp_GetLit("lamp_long_hallway_2");
		bool l3 = Lamp_GetLit("lamp_long_hallway_3");
		bool l4 = Lamp_GetLit("lamp_long_hallway_4");

		if (asChild == "TriggerArea_1" && l1)
		{
			Lamp_SetLit("lamp_long_hallway_1", false, true);
			Sound_Play("Sound_1", 0);
		}
		else if (asChild == "TriggerArea_2" && l2)
		{
			Lamp_SetLit("lamp_long_hallway_2", false, true);
			Sound_Play("Sound_2", 0);
		}
		else if (asChild == "TriggerArea_3" && l3)
		{
			Lamp_SetLit("lamp_long_hallway_3", false, true);
			Sound_Play("Sound_3", 0);
		}
		else if (asChild == "TriggerArea_4" && l4)
		{
			Lamp_SetLit("lamp_long_hallway_4", false, true);
			Sound_Play("Sound_4", 0);

			Lamp_SetLit("warning_light_ceiling_1", true, true);
		}
		else if (asChild == "TriggerArea_Flee" && !l1 && !l2 && !l3 && !l4)
		{
			float amount = SlideDoor_GetOpenAmount("door_1");
			if(0 < amount)
			{
				SlideDoor_SetClosed("door_1", true);
				Music_Play("01_01_door_smashed.ogg", 1, false, eMusicPrio_MinorEvent);
			}
		}

		return true;
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}

	//-------------------------------------------------------

	//} END MAIN CALLBACKS


	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////

	//-------------------------------------------------------

	/*Put any variables that are used in more than one scene here.*/

	//-------------------------------------------------------

	/*Put any functions that are used in more than one scene here.*/

	//-------------------------------------------------------

	//} END MAIN FUNCTIONS

	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////

		 /////////////////////////////////////////
		 // General
		 //{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are used by many events in Scene X here.*/

		//-------------------------------------------------------

		/*Put any functions that are used in more than one event in Scene X here.*/

		//-------------------------------------------------------

		//} END General

		 /////////////////////////////////////////
		 // Event *Name Of Event*
		 //{//////////////////////////////////////

		 //-------------------------------------------------------

		 /*Put any variables that are only used in Scene X, Event X here.*/

		 //-------------------------------------------------------

		 /*Put any functionsthat are only used in Scene X, Event X here.*/

		 //-------------------------------------------------------

		 //} END Event *Name Of Event*

	 //} END SCENE X


	 /////////////////////////////////////////
	 // ==============
	 // TERMINALS
	 // ==============
	 //{//////////////////////////////////////

		 //-------------------------------------------------------

		 /////////////////////////////////////////
		 // Terminal *Name Of Terminal*
		 //{//////////////////////////////////////

		 //-------------------------------------------------------

		 /*Put any variables that are only used Terminal here.*/

		 //-------------------------------------------------------

		 /*Put any functions that are only used Terminal here.*/

		 //-------------------------------------------------------

		 //} END Terminal *Name Of Terminal*

	//} END TERMINALS

}